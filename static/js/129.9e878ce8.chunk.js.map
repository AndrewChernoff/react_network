{"version":3,"file":"static/js/129.9e878ce8.chunk.js","mappings":"gLAOS,SAASA,EAAoBC,GAOlC,OAAOC,EAAAA,EAAAA,IAAQC,EAARD,EALqB,SAACE,GACzB,OAAIA,EAAMC,QAEH,SAACJ,GAAS,UAAKG,KAFG,SAAC,KAAQ,CAACE,GAAG,UAG1C,GAEF,CAEA,IAAMH,EAAkB,SAACI,GACvB,MAAO,CACHF,OAAQE,EAAMC,KAAKH,OAE3B,C,8CCOA,IAfoB,SAAH,GAAiH,IAA5GI,EAAE,EAAFA,GAAIC,EAAkB,EAAlBA,mBAAoBC,EAAa,EAAbA,cAAeC,EAAW,EAAXA,YAAaC,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAAWC,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAC7F,OAAQ,gCACPA,IAAY,kBAAOC,QAASR,EAAG,SAAEO,KAClC,SAAC,KAAK,CACNP,GAAIA,EACJI,KAAMA,EACND,YAAaA,EACbG,KAAMA,EACNG,UAAWP,EACXQ,SAAUT,EACVI,UAAWA,MAGf,C,gHCzBA,EAA0B,0BAA1B,EAAqE,iCAArE,EAAsH,gCAAtH,EAA8O,oCAA9O,EAAkS,gCAAlS,EAA+U,6B,SCwDzUM,EAAkB,SAAH,GAAyC,IAApCC,EAAQ,EAARA,SAElBC,EAAmB,SAACC,GACxB,IAAIC,EAIL,OAHID,EAAME,QAAU,KAClBD,EAAQ,0BAEHA,CACR,EAEA,OAAO,SAAC,KAAM,CACdE,cAAe,CACbC,QAAS,IAEXC,SAAU,SACRC,EAAe,GAEX,IADFC,EAAS,EAATA,UAEFT,EAASQ,EAAOF,SAChBG,GACF,EAAE,SAEH,gBAAGC,EAAM,EAANA,OAAM,OAAQ,UAAC,KAAI,YACnB,SAACC,EAAA,EAAW,CAACtB,mBAAoBY,EACjCX,cAAe,WAAYC,YAAa,oBAAqBC,KAAM,UAAWE,KAAM,OAAQD,UAAWiB,EAAOJ,QAASM,EAAkB,KACxIF,EAAOJ,UAAW,gBAAKb,UAAWmB,EAAa,SAAEF,EAAOJ,WAEzD,mBAAQZ,KAAK,SAASmB,WAAUH,EAAOJ,QAAuB,oBACzD,GAGT,EAEA,EA5EiB,SAACvB,GAEhB,OACE,iBAAKU,UAAWmB,EAAU,WACxB,gBAAKnB,UAAWmB,EAAiB,SAC9B7B,EAAM+B,QAAQC,KAAI,SAACC,GAClB,OACE,SAAC,KAAO,CAEN/B,GAAE,UAAK+B,EAAG5B,IACVF,MAAO,CAAE+B,SAAUD,EAAGxB,MACtBC,UAAWmB,EAAgB,SAE1BI,EAAGxB,MALCwB,EAAG5B,GAQd,OAGF,iBAAKK,UAAWmB,EAAoB,UACjC7B,EAAMmC,SAASH,KAAI,YAAoB,IAAlBT,EAAO,EAAPA,QAASlB,EAAE,EAAFA,GAC7B,OAAQ,gBAAKK,UAAWmB,EAAgB,SAAWN,GAALlB,EAChD,KACA,gBAAKK,UAAWmB,EAAgB,UAG9B,SAACb,EAAe,CAACC,SAAUjB,EAAMoC,qBAM3C,E,8BCHA,GAAeC,EAAAA,EAAAA,KACbvC,EAAAA,EAAAA,KApBiB,SAACK,GAEjB,MAAO,CACN4B,QAAS5B,EAAMmC,YAAYP,QAC3BI,SAAUhC,EAAMmC,YAAYH,SAE9B,IAMoB,SAACI,GACnB,MAAO,CACLC,YAAa,SAACC,GACZF,GAASC,EAAAA,EAAAA,GAAYC,GACvB,EACJ,IAIA7C,EAAAA,EAFF,EAjC0B,SAAH,GAA6D,IAAxD4C,EAAW,EAAXA,YAAaL,EAAQ,EAARA,SAAUJ,EAAO,EAAPA,QAMjD,OAAO,SAAC,EAAQ,CAACK,YAJG,SAACb,GACnBiB,EAAY,CAACnC,GAAI,EAAGkB,QAASA,GAC/B,EAE2CY,SAAUA,EAAUJ,QAASA,GAC1E,G","sources":["HOC/WithAuthRedirect.tsx","common/FormControl/FormControl.tsx","webpack://my-app/./src/components/Messages/Messages.module.scss?b126","components/Messages/Messages.tsx","components/Messages/MessagesContainer.tsx"],"sourcesContent":["import { connect } from \"react-redux\"\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { AppState } from \"../redux/reducers\"\r\n\r\ntype MapStateType = {\r\n    isAuth: boolean\r\n}\r\n  export function withAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n  \r\n    const RedirectedComponent = (props: MapStateType) => {\r\n        if(!props.isAuth) return <Navigate to='/login'/>\r\n\r\n        return <Component {...props as any} />;\r\n    };\r\n    return connect(mapStatetoProps)(RedirectedComponent);\r\n  }\r\n\r\n  const mapStatetoProps = (state: AppState): MapStateType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n","import { Field } from \"formik\"\r\n\r\ntype FormControlProps = {\r\n  id?: string\r\n  validationCallback?: (value: string) => void\r\n  componentType: string\r\n  placeholder?: string\r\n  name: string\r\n  className?: string\r\n  type: string\r\n  labelName?: string\r\n}\r\n\r\nconst FormControl = ({id, validationCallback, componentType, placeholder, name, className, type, labelName}:FormControlProps) => {\r\n    return  <>\r\n    {labelName &&<label htmlFor={id}>{labelName}</label>}\r\n    <Field\r\n    id={id}\r\n    name={name}\r\n    placeholder={placeholder}\r\n    type={type}\r\n    component={componentType}\r\n    validate={validationCallback}\r\n    className={className}\r\n  />\r\n  </>\r\n}\r\n\r\nexport default FormControl","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Messages_dialogs__H54k5\",\"dialogs__items\":\"Messages_dialogs__items__h9cxS\",\"dialogs__item\":\"Messages_dialogs__item__AbhMG\",\"dialogs__item__textarea\":\"Messages_dialogs__item__textarea__Wmn5l\",\"dialogs__messages\":\"Messages_dialogs__messages__G01Gz\",\"errorTextarea\":\"Messages_errorTextarea__sq3Qt\",\"errorBlock\":\"Messages_errorBlock__M57GU\"};","import { Field, Formik, Form, FormikHelpers } from \"formik\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport FormControl from \"../../common/FormControl/FormControl\";\r\nimport {\r\n  MessageType\r\n} from \"../../redux/reducers/messagesReducer\";\r\nimport s from \"./Messages.module.scss\";\r\n\r\ntype DialogsProps = {\r\n  dialogs: any[]\r\n  messages: MessageType[]\r\n  onSendClick: (message: string) => void\r\n}\r\n\r\nconst Messages = (props: DialogsProps) => {\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogs__items}>\r\n        {props.dialogs.map((el) => {\r\n          return (\r\n            <NavLink\r\n              key={el.id}\r\n              to={`${el.id}`}\r\n              state={{ userName: el.name }}\r\n              className={s.dialogs__item}\r\n            >\r\n              {el.name}\r\n            </NavLink>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      <div className={s.dialogs__messages}>\r\n        {props.messages.map(({message, id}) => {\r\n          return  <div className={s.dialogs__item} key={id}>{message}</div>\r\n        })}\r\n        <div className={s.dialogs__item}> \r\n          {/* <textarea value={props.message} onChange={props.onChangeHandler} className={s.dialogs__item__textarea} />\r\n          <button onClick={props.onSendClick}>Send message</button> */}\r\n          <AddPostItemFrom callback={props.onSendClick}/>\r\n        </div>\r\n      </div>\r\n      </div>\r\n   \r\n  );\r\n};\r\n\r\n\r\ninterface Values {\r\n  message: string;\r\n}\r\n\r\ntype AddPostItemFromType = {\r\n  callback: (value: string) => void\r\n}\r\n\r\nconst AddPostItemFrom = ({callback}: AddPostItemFromType) => {\r\n\r\n  const validateFormItem = (value: string) => {\r\n    let error;\r\n   if (value.length >= 30) {\r\n     error = 'Should be less then 20';\r\n   }\r\n   return error;\r\n  }\r\n\r\n  return <Formik\r\n  initialValues={{\r\n    message: '',\r\n  }}\r\n  onSubmit={(\r\n    values: Values,\r\n    { resetForm }: FormikHelpers<Values>\r\n  ) => {\r\n    callback(values.message)\r\n    resetForm()\r\n  }}\r\n>\r\n{({ errors }) => (<Form>\r\n    <FormControl validationCallback={validateFormItem} \r\n    componentType={'textarea'} placeholder={'Type your message'} name={'message'} type={'text'} className={errors.message? s.errorTextarea : ''}/>\r\n    {errors.message && <div className={s.errorBlock}>{errors.message}</div>}\r\n\r\n    <button type=\"submit\" disabled={errors.message ? true : false}>Send</button>\r\n  </Form>\r\n  )}\r\n</Formik>\r\n}\r\n\r\nexport default Messages;\r\n","import { ComponentType } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Messages from \"./Messages\";\r\nimport { DialogType, MessageType, sendMessage,} from \"../../redux/reducers/messagesReducer\";\r\nimport { compose, Dispatch } from \"redux\";\r\nimport { AppState } from \"../../redux/reducers\";\r\nimport { withAuthRedirect } from \"../../HOC/WithAuthRedirect\";\r\n\r\ntype MessagesPropsType = MapStateType & MapDispatchType\r\n\r\nconst MessagesContainer = ({sendMessage, messages, dialogs}: MessagesPropsType) => {\r\n  \r\n  const onSendClick = (message: string) => {\r\n    sendMessage({id: 5, message: message})\r\n  }\r\n  \r\n  return <Messages onSendClick={onSendClick} messages={messages} dialogs={dialogs} /* onChangeHandler={onChangeHandler} *//>\r\n}\r\n\r\ntype MapStateType = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n  };\r\n  \r\n  const mapState = (state: AppState): MapStateType => {\r\n   \r\n   return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n   }\r\n  };\r\n\r\ntype MapDispatchType = {\r\n  sendMessage: (obj: MessageType) => void\r\n}\r\n  \r\n  const mapDispatch = (dispatch: Dispatch): MapDispatchType => {\r\n    return {\r\n      sendMessage: (obj: MessageType) =>  {\r\n        dispatch(sendMessage(obj))\r\n      }};\r\n  };\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapState, mapDispatch),\r\n  withAuthRedirect\r\n  )(MessagesContainer)"],"names":["withAuthRedirect","Component","connect","mapStatetoProps","props","isAuth","to","state","auth","id","validationCallback","componentType","placeholder","name","className","type","labelName","htmlFor","component","validate","AddPostItemFrom","callback","validateFormItem","value","error","length","initialValues","message","onSubmit","values","resetForm","errors","FormControl","s","disabled","dialogs","map","el","userName","messages","onSendClick","compose","dialogsPage","dispatch","sendMessage","obj"],"sourceRoot":""}