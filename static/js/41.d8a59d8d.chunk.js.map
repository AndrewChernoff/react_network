{"version":3,"file":"static/js/41.d8a59d8d.chunk.js","mappings":"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","sources":["HOC/WithAuthRedirect.tsx","common/FormControl/FormControl.tsx","webpack://my-app/./src/components/PostItem/PostItem.module.scss?8727","components/PostItem/PostItem.tsx","webpack://my-app/./src/components/Profile/Profile.module.scss?4008","webpack://my-app/./src/components/Profile/ProfileInfo.module.scss?5497","webpack://my-app/./src/components/Profile/ProfileFormInfo/ProfileFormInfo.module.scss?d4d7","components/Profile/ProfileFormInfo/ProfileFormInfo.tsx","components/Profile/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["import { connect } from \"react-redux\"\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { AppState } from \"../redux/reducers\"\r\n\r\ntype MapStateType = {\r\n    isAuth: boolean\r\n}\r\n  export function withAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n  \r\n    const RedirectedComponent = (props: MapStateType) => {\r\n        if(!props.isAuth) return <Navigate to='/login'/>\r\n\r\n        return <Component {...props as any} />;\r\n    };\r\n    return connect(mapStatetoProps)(RedirectedComponent);\r\n  }\r\n\r\n  const mapStatetoProps = (state: AppState): MapStateType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n","import { Field } from \"formik\"\r\n\r\ntype FormControlProps = {\r\n  id?: string\r\n  validationCallback?: (value: string) => void\r\n  componentType: string\r\n  placeholder?: string\r\n  name: string\r\n  className?: string\r\n  type: string\r\n  labelName?: string\r\n}\r\n\r\nconst FormControl = ({id, validationCallback, componentType, placeholder, name, className, type, labelName}:FormControlProps) => {\r\n    return  <>\r\n    {labelName &&<label htmlFor={id}>{labelName}</label>}\r\n    <Field\r\n    id={id}\r\n    name={name}\r\n    placeholder={placeholder}\r\n    type={type}\r\n    component={componentType}\r\n    validate={validationCallback}\r\n    className={className}\r\n  />\r\n  </>\r\n}\r\n\r\nexport default FormControl","// extracted by mini-css-extract-plugin\nexport default {\"post__item\":\"PostItem_post__item__9F1t8\",\"post__item_info\":\"PostItem_post__item_info__1Gft8\",\"post__item_message\":\"PostItem_post__item_message__kqspZ\"};","import s from \"./PostItem.module.scss\";\r\n\r\ninterface Message {\r\n  message: string;\r\n  likes: number\r\n}\r\n\r\nconst PostItem = ({ message, likes }: Message) => {\r\n  return (\r\n    <div className={s.post__item}>\r\n      <img\r\n        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQm-BebyP8MCIYBsrjWGGdgXo2gnqI95ckd1w&usqp=CAU\"\r\n        alt=\"ava\"\r\n      />\r\n      <div className={s.post__item_info}>\r\n        <div className={s.post__item_message}>{message}</div>\r\n        <div className={s.post__item_likes}>likes: {likes}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostItem;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profile__container\":\"Profile_profile__container__pDfba\",\"profile__post\":\"Profile_profile__post__fd-kg\",\"errorTextarea\":\"Profile_errorTextarea__fuQuo\",\"errorBlock\":\"Profile_errorBlock__JCaoe\"};","// extracted by mini-css-extract-plugin\nexport default {\"info\":\"ProfileInfo_info__Fgwwz\",\"infoContent\":\"ProfileInfo_infoContent__TL9pO\",\"userContacts\":\"ProfileInfo_userContacts__EvtqC\",\"contacts\":\"ProfileInfo_contacts__AdlS1\",\"errorMessage\":\"ProfileInfo_errorMessage__ToeVM\"};","// extracted by mini-css-extract-plugin\nexport default {\"formInfo\":\"ProfileFormInfo_formInfo__qvUWz\"};","import { Field, Form, Formik } from \"formik\";\r\nimport { UserType } from \"../../../redux/reducers/profileReducer\";\r\nimport s from './ProfileFormInfo.module.scss'\r\nimport FormControl from \"../../../common/FormControl/FormControl\";\r\n\r\nexport type UserContactValues = {\r\n  fullName: string | null\r\n  aboutMe: string | null\r\n  lookingForAJobDescription: boolean //?\r\n  lookingForAJob: boolean //?\r\n  contacts: {\r\n    [key:string]: string | null\r\n  }\r\n}\r\n\r\ntype ProfileFormInfoType = {\r\n  profile: UserType\r\n  updateUserInfo: (info: UserContactValues) => void\r\n  setEditInfo: () => void\r\n}\r\n\r\nconst ProfileFormInfo = ({profile, updateUserInfo, setEditInfo}:  ProfileFormInfoType) => {  \r\n\r\n  const validateRequired = (value:string) => {\r\n    let error;\r\n    if (!value) {\r\n      error = 'Required';\r\n    }\r\n    return error;\r\n  };\r\n  \r\n      const initialValues: UserContactValues  = {\r\n        fullName: profile.fullName,\r\n        aboutMe: profile?.aboutMe,\r\n        lookingForAJobDescription: profile?.lookingForAJobDescription,\r\n        lookingForAJob: profile?.lookingForAJob,\r\n        contacts: {\r\n          github: profile.contacts.github,\r\n          vk: profile.contacts.vk,\r\n          facebook: profile.contacts.facebook,\r\n          instagram: profile.contacts.instagram,\r\n          twitter: profile.contacts.twitter,\r\n          website: profile.contacts.website,\r\n          youtube: profile.contacts.youtube,\r\n          mainLink: profile.contacts.mainLink\r\n        }\r\n      };\r\n       \r\n   return (\r\n     <div>\r\n       <h1>Edit Info</h1>\r\n       <Formik\r\n         initialValues={initialValues}\r\n         onSubmit={(values, actions) => {\r\n           console.log(values);\r\n          updateUserInfo(values);\r\n            //actions.setSubmitting(false);\r\n           setEditInfo()\r\n         }}\r\n       >\r\n       {({ errors }) => ( <Form className={s.formInfo}>\r\n\r\n           <FormControl validationCallback={validateRequired} id={\"fullName\"} componentType={\"input\"} name={\"fullName\"}type={\"text\"}/>\r\n           {errors && <div>{errors.fullName}</div>}\r\n\r\n          <FormControl validationCallback={validateRequired} id={\"aboutMe\"} componentType={\"input\"} name={\"aboutMe\"}type={\"text\"}/>\r\n          {errors && <div>{errors.aboutMe}</div>}\r\n\r\n          <FormControl id={\"lookingForAJob\"} componentType={\"input\"} name={\"lookingForAJob\"}type={\"checkbox\"}/>\r\n        \r\n        <FormControl validationCallback={validateRequired} id={\"lookingForAJobDescription\"} componentType={\"input\"} name={\"lookingForAJobDescription\"}type={\"text\"}/>\r\n          {errors && <div>{errors.lookingForAJobDescription}</div>}\r\n            \r\n             {profile.contacts && \r\n                Object.keys(profile.contacts).map((_,i) => {\r\n                    const contactName = Object.keys(profile.contacts)[i]\r\n                 return <li>{contactName}:<Field id={`contacts.${contactName}`} name={`contacts.${contactName}`} /></li>\r\n                })}\r\n            <button type=\"submit\">Submit</button>\r\n            <button onClick={setEditInfo}>Cancel</button>\r\n        </Form>\r\n       )}\r\n       </Formik>\r\n       \r\n     </div>\r\n    )\r\n  }\r\n\r\nexport default ProfileFormInfo","import { ChangeEvent, useEffect, useState } from \"react\";\r\nimport userAva from '../../imgs/user.png';\r\nimport { UserType } from \"../../redux/reducers/profileReducer\";\r\nimport s from \"./ProfileInfo.module.scss\";\r\nimport ProfileFormInfo, { UserContactValues } from \"./ProfileFormInfo/ProfileFormInfo\";\r\n\r\ntype ProfileInfoType = {\r\n  authId: number | null\r\n  profile: UserType\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  updateUserInfo: (info: UserContactValues) => void\r\n  error: string | null\r\n  setError: (message: string | null) => void\r\n  uploadPhoto: (image: File) => void\r\n}\r\n\r\nconst ProfileInfo = ({authId, profile, status, updateStatus, updateUserInfo, error, setError, uploadPhoto}: ProfileInfoType) => {\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const [editInfo, setEditInfo] = useState<boolean>(false)\r\n  const [title, setTitle] = useState<string>(status)\r\n\r\n   useEffect(() => {\r\n    setTitle(status)\r\n    return () => {\r\n      error && setError(null)\r\n    }\r\n  }, [status])\r\n\r\n  const isOwner = (authId === profile?.userId)\r\n\r\n  const onDoubleClickHandler = () => {\r\n    if(!(authId === profile?.userId)) {\r\n      return\r\n    } \r\n    setEditMode(!editMode)\r\n  }\r\n\r\n  const onBlurHandler = () => {\r\n    updateStatus(title)\r\n    setEditMode(!editMode)\r\n  }\r\n\r\n  const setEditInfoMode = () => setEditInfo(!editInfo)\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n  \r\n  const uploadImg = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      uploadPhoto(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n       <img src={`${profile ? profile.photos.large : userAva}`} alt='ava'/>\r\n\r\n       <input type='file' onChange={uploadImg}/>\r\n       \r\n      <div> Status: {!editMode ? \r\n       <span onDoubleClick={onDoubleClickHandler}>{title}</span>\r\n      : <input type='text' value={title} onChange={onStatusChange} onBlur={onBlurHandler}/>} \r\n    </div>\r\n    <div>\r\n    {!editInfo ? <div className={s.info}>\r\n      <h2>Main info</h2>\r\n      <ul className={s.infoContent}>\r\n      <li>\r\n      Full name: {profile?.fullName}\r\n      </li>\r\n      <li>\r\n      About me: {profile?.aboutMe}\r\n      </li>\r\n      <li>\r\n      Looking for a job: {profile?.lookingForAJob ? 'yes' : ' no'}\r\n      </li>\r\n      <li>\r\n      Looking for a job description: {profile?.lookingForAJobDescription}\r\n      </li>\r\n    </ul>\r\n    <div className={s.contacts}>\r\n      <h3> Contacts:</h3>\r\n    <ul>\r\n        {profile && Object.keys(profile.contacts).map(key => {\r\n          return <li>{key}: {profile.contacts[key] || '--'}</li>\r\n        })}\r\n      </ul>\r\n    </div>\r\n    {isOwner && <button onClick={() => setEditInfo(!editInfo)}>Edit info</button>}\r\n\r\n    </div>\r\n    : <ProfileFormInfo \r\n      setEditInfo={setEditInfoMode}\r\n       profile={profile} \r\n       updateUserInfo={updateUserInfo}/>\r\n      }\r\n      </div>\r\n      {error && <div className={s.errorMessage}>{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default ProfileInfo;\r\n","import { Form, Formik, FormikHelpers } from \"formik\";\r\nimport FormControl from \"../../common/FormControl/FormControl\";\r\nimport { PostsType, UserType } from \"../../redux/reducers/profileReducer\";\r\nimport PostItem from \"../PostItem/PostItem\";\r\nimport s from \"./Profile.module.scss\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport { UserContactValues } from \"./ProfileFormInfo/ProfileFormInfo\";\r\n\r\n type ProfileProps = {\r\n  posts: PostsType[],\r\n  onAddPostClick: (value: string) => void\r\n  authId: number | null\r\n  profile: UserType\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  updateUserInfo: (info: UserContactValues) => void\r\n  error: string | null\r\n  setError: (message: string | null) => void\r\n  uploadPhoto: (image: File) => void\r\n}\r\n\r\nconst Profile = ({posts, onAddPostClick, authId, profile, status, updateStatus, updateUserInfo, error, setError, uploadPhoto}: ProfileProps) => {\r\n\r\n  return (\r\n    <div className={s.profile}>\r\n      <div className={s.profile__container}>\r\n        <ProfileInfo authId={authId} profile={profile} status={status}\r\n        updateStatus={updateStatus}\r\n        updateUserInfo={updateUserInfo}\r\n        uploadPhoto={uploadPhoto}\r\n        setError={setError}\r\n        error={error}\r\n        />\r\n\r\n        <div className={s.profile__post}>\r\n          <AddPostItemFrom callback={onAddPostClick}/>\r\n        </div>\r\n        {\r\n            posts.map((el) => {\r\n                return <PostItem key={el.id} message={el.message} likes={el.likes}/>\r\n            })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n//////\r\ninterface Values {\r\n  postValue: string;\r\n}\r\n\r\ntype AddPostItemFromType = {\r\n  callback: (value: string) => void\r\n}\r\n\r\nconst AddPostItemFrom = ({callback}: AddPostItemFromType) => {\r\n\r\n  const validateFormItem = (value: string) => {\r\n    let error;\r\n   if (value.length >= 30) {\r\n     error = 'Should be less then 30';\r\n   }\r\n   return error;\r\n  }\r\n\r\n  return <Formik\r\n  initialValues={{\r\n    postValue: '',\r\n  }}\r\n  onSubmit={(\r\n    values: Values,\r\n    { resetForm }: FormikHelpers<Values>\r\n  ) => {\r\n    callback(values.postValue)\r\n    resetForm()\r\n  }}\r\n >\r\n\r\n{({ errors }) => (\r\n  <Form>\r\n    <FormControl validationCallback={validateFormItem} \r\n    componentType={'textarea'} placeholder={'Type your post'} name={'postValue'} type={'text'} className={errors.postValue? s.errorTextarea : ''}/>\r\n    {errors.postValue && <div className={s.errorBlock}>{errors.postValue}</div>}\r\n\r\n    <button type=\"submit\" disabled={errors.postValue ? true : false}>Add post</button>\r\n  </Form>\r\n)}\r\n</Formik>\r\n}\r\n\r\nexport default Profile;","import { ComponentType, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AnyAction, compose } from \"redux\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport { withAuthRedirect } from \"../../HOC/WithAuthRedirect\";\r\nimport { AppDispatch, AppState } from \"../../redux/reducers\";\r\nimport { addPost, PostsType, setErrorAC, setUser, setUserStatus, updatePhoto, updateStatus, updateUserInfo, UserType } from \"../../redux/reducers/profileReducer\";\r\nimport Profile from \"./Profile\";\r\nimport { UserContactValues } from \"./ProfileFormInfo/ProfileFormInfo\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ntype PropsType = MapStateType & MapDispatchType\r\n\r\nexport type MapStateType = {\r\n  posts: PostsType[]\r\n  user: UserType\r\n  authId: number | null\r\n  status: string\r\n  error: string | null\r\n}\r\n\r\nexport type MapDispatchType = {\r\n  addPost: (obj: PostsType) => void\r\n  setUser: (id: number) => void\r\n  setStatus: (userId: number) => void\r\n  updateStatus: (status: string) => void\r\n  updateUserInfo: (info: UserContactValues) => void\r\n  setError: (message: string | null) => void\r\n  uploadPhoto: (image: File) => void\r\n}\r\n\r\nconst ProfileContainer = ({setUser, setStatus, authId, addPost, posts, user, status,\r\n  updateStatus, updateUserInfo, setError, error, uploadPhoto}: PropsType) => {\r\n  \r\n    const {id} = useParams();\r\n  \r\n    useEffect(() => {\r\n      if(id) {\r\n          setUser(+id)\r\n          setStatus(+id)\r\n      } else {\r\n        if(authId) {\r\n          setUser(authId)\r\n          setStatus(authId)\r\n        }\r\n      }\r\n    }, [id])\r\n\r\n    const onAddPostClick = (value: string) => {\r\n      addPost({id: (posts.length + 1), message: value, likes: 0});\r\n    }\r\n\r\n    return (\r\n        <Profile onAddPostClick={onAddPostClick} \r\n          posts={posts}\r\n          profile={user}\r\n          authId={authId}\r\n          status={status}\r\n          updateStatus={updateStatus}\r\n          updateUserInfo={updateUserInfo}\r\n          setError={setError}\r\n          error={error}\r\n          uploadPhoto={uploadPhoto}\r\n        />\r\n    )\r\n}\r\n\r\n  const mapState = (state: AppState): MapStateType => ({\r\n    posts: state.profile.posts,\r\n    user: state.profile.user,\r\n    authId: state.auth.id,\r\n    status: state.profile.status,\r\n    error: state.profile.error\r\n  })\r\n\r\n \r\n  \r\n  const mapDispatchToProps = (dispatch: AppDispatch): MapDispatchType => {\r\n    \r\n    return {\r\n        addPost: (obj) => {\r\n            dispatch(addPost(obj))\r\n        },\r\n        setUser: (id) => dispatch(setUser(id)),\r\n        setStatus: (userId) => dispatch(setUserStatus(userId)),\r\n        updateStatus: (status) => dispatch(updateStatus(status)),\r\n        updateUserInfo: (info) => dispatch(updateUserInfo(info)),\r\n        setError: (message) => dispatch(setErrorAC(message)),\r\n        uploadPhoto: (photo) => dispatch(updatePhoto(photo))\r\n    }\r\n  };\r\n  \r\nexport default compose<ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapState, mapDispatchToProps),\r\n  ) (ProfileContainer)\r\n"],"names":["withAuthRedirect","Component","connect","mapStatetoProps","props","isAuth","to","state","auth","id","validationCallback","componentType","placeholder","name","className","type","labelName","htmlFor","component","validate","message","likes","s","src","alt","profile","updateUserInfo","setEditInfo","validateRequired","value","error","initialValues","fullName","aboutMe","lookingForAJobDescription","lookingForAJob","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","onSubmit","values","actions","console","log","errors","FormControl","Object","keys","map","_","i","contactName","onClick","authId","status","updateStatus","setError","uploadPhoto","useState","editMode","setEditMode","editInfo","title","setTitle","useEffect","isOwner","userId","photos","large","userAva","onChange","e","target","files","length","currentTarget","onBlur","onDoubleClick","key","AddPostItemFrom","callback","validateFormItem","postValue","resetForm","disabled","posts","onAddPostClick","el","compose","user","dispatch","addPost","obj","setUser","setStatus","setUserStatus","info","setErrorAC","photo","updatePhoto","useParams"],"sourceRoot":""}