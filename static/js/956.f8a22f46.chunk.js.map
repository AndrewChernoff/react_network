{"version":3,"file":"static/js/956.f8a22f46.chunk.js","mappings":"4HA4BA,IAfoB,SAAH,GAAiH,IAA5GA,EAAE,EAAFA,GAAIC,EAAkB,EAAlBA,mBAAoBC,EAAa,EAAbA,cAAeC,EAAW,EAAXA,YAAaC,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAAWC,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAC7F,OAAQ,gCACPA,IAAY,kBAAOC,QAASR,EAAG,SAAEO,KAClC,SAAC,KAAK,CACNP,GAAIA,EACJI,KAAMA,EACND,YAAaA,EACbG,KAAMA,EACNG,UAAWP,EACXQ,SAAUT,EACVI,UAAWA,MAGf,C,oICzBA,EAA0B,uBAA1B,EAAyD,qBAAzD,EAAmG,kCAAnG,EAAkJ,0BAAlJ,EAAyL,0BAAzL,EAAyN,mB,SCmHzN,EApGgB,WACZ,IAAMM,GAASC,EAAAA,EAAAA,KAA+B,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,MAAM,IAClEI,GAAaH,EAAAA,EAAAA,KAA+B,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,UAAU,IAC1EC,GAAaJ,EAAAA,EAAAA,KAAqC,SAAAC,GAAK,OAAIA,EAAMC,KAAKG,OAAO,IAC7EC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAMjB,SAASC,EAAcC,GACrB,IAAIC,EAMJ,OALKD,EAEO,4CAA4CE,KAAKF,KAC3DC,EAAQ,yBAFRA,EAAQ,WAIHA,CACT,CAEA,SAASE,EAAiBH,GACxB,IAAIC,EAKJ,OAJKD,IACHC,EAAQ,YAGHA,CACT,CAEA,OAvBAG,EAAAA,EAAAA,YAAU,WACLhB,GAAQS,EAAS,WACtB,GAAE,CAACT,KAsBC,4BACE,oCACA,SAAC,KAAM,CACLiB,cAAe,CACbC,SAAU,GACVC,MAAO,GACPC,YAAY,EACZd,QAAS,IAEXe,SAAU,SACRC,EAAe,GAEX,IADFC,EAAa,EAAbA,cAEFC,YAAW,WAEGF,EAAOJ,SACVI,EAAOH,MACFG,EAAOF,WACVE,EAAOhB,QAElBC,GAASkB,EAAAA,EAAAA,IAAMH,IACfC,GAAc,EAChB,GAAG,IACL,EAAE,SAED,gBAAGG,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAAO,OACnB,UAAC,KAAI,YACL,iBAAKjC,UAAWkC,EAAU,WACxB,kBAAO/B,QAAQ,QAAO,oBACtB,SAACgC,EAAA,EAAW,CAACpC,KAAK,QAChBJ,GAAG,QACHG,YAAY,gBACZG,KAAK,QACLL,mBAAoBqB,EACpBpB,cAAe,QACfG,UAAWgC,EAAOP,OAASQ,EAAQR,MAAQS,EAAeA,IAC3DF,EAAOP,OAASQ,EAAQR,QAAS,gBAAKzB,UAAWkC,EAAa,SAAEF,EAAOP,YAG1E,iBAAKzB,UAAWkC,EAAU,WACxB,kBAAO/B,QAAQ,WAAU,uBACzB,SAACgC,EAAA,EAAW,CAACpC,KAAK,WAChBJ,GAAG,WACHG,YAAY,WACZG,KAAK,WACLL,mBAAoByB,EACpBxB,cAAe,QACfG,UAAWgC,EAAOR,UAAYS,EAAQT,SAAWU,EAAuBA,IACzEF,EAAOR,UAAYS,EAAQT,WAAY,gBAAKxB,UAAWkC,EAAa,SAAEF,EAAOR,eAG5E,kBAAOrB,QAAQ,aAAY,0BAC7B,SAAC,KAAK,CAACR,GAAG,aAAaI,KAAK,aAAcE,KAAK,cAC/C,mBAAQA,KAAK,SAASD,UAAWkC,EAAM,oBACtCxB,GAAa,gBAAKV,UAAWkC,EAAa,2CAAsC,KAGhFvB,IAAc,4BACf,gBAAKyB,IAAKzB,EAAY0B,IAAI,aAE1B,SAAC,KAAK,CAAC1C,GAAG,UAAUI,KAAK,UAAWE,KAAK,eAGpC,MAInB,C","sources":["common/FormControl/FormControl.tsx","webpack://my-app/./src/components/Login/Login.module.scss?4086","components/Login/Login.tsx"],"sourcesContent":["import { Field } from \"formik\"\r\n\r\ntype FormControlProps = {\r\n  id?: string\r\n  validationCallback?: (value: string) => void\r\n  componentType: string\r\n  placeholder?: string\r\n  name: string\r\n  className?: string\r\n  type: string\r\n  labelName?: string\r\n}\r\n\r\nconst FormControl = ({id, validationCallback, componentType, placeholder, name, className, type, labelName}:FormControlProps) => {\r\n    return  <>\r\n    {labelName &&<label htmlFor={id}>{labelName}</label>}\r\n    <Field\r\n    id={id}\r\n    name={name}\r\n    placeholder={placeholder}\r\n    type={type}\r\n    component={componentType}\r\n    validate={validationCallback}\r\n    className={className}\r\n  />\r\n  </>\r\n}\r\n\r\nexport default FormControl","// extracted by mini-css-extract-plugin\nexport default {\"formRow\":\"Login_formRow__KmthG\",\"input\":\"Login_input__M5sTK\",\"errorPasswordInput\":\"Login_errorPasswordInput__52VzR\",\"errorInput\":\"Login_errorInput__NHmHu\",\"errorBlock\":\"Login_errorBlock__VJCle\",\"btn\":\"Login_btn__2JN4v\",\"textarea\":\"Login_textarea__eadIj\",\"button\":\"Login_button__uwF-1\"};","import { Field, Form, Formik, FormikHelpers } from \"formik\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\nimport FormControl from \"../../common/FormControl/FormControl\";\r\nimport { AppDispatch, AppState } from \"../../redux/reducers\";\r\nimport { logIn } from \"../../redux/reducers/authReducer\";\r\nimport s from './Login.module.scss'\r\n\r\ninterface Values {\r\n    password: string\r\n    email: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n  }\r\n\r\n  const Login = () => {\r\n    const isAuth = useSelector<AppState, boolean>(state => state.auth.isAuth)\r\n    const loginError = useSelector<AppState, boolean>(state => state.auth.loginError)\r\n    const captchaImg = useSelector<AppState, string | null>(state => state.auth.captcha)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n      if(isAuth) navigate(\"/profile\");\r\n    },[isAuth])\r\n\r\n    function validateEmail(value: string) {      \r\n      let error;\r\n      if (!value) {\r\n        error = 'Required';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n        error = 'Invalid email address';\r\n      }\r\n      return error;\r\n    }\r\n\r\n    function validatePassword(value: string) {\r\n      let error;\r\n      if (!value) {\r\n        error = 'Required';\r\n      }\r\n\r\n      return error;\r\n    }\r\n    \r\n    return  (\r\n        <div>\r\n          <h2>Log in</h2>\r\n          <Formik\r\n            initialValues={{\r\n              password: '',\r\n              email: '',\r\n              rememberMe: false,\r\n              captcha: ''\r\n            }}\r\n            onSubmit={(\r\n              values: Values,\r\n              { setSubmitting }: FormikHelpers<Values>\r\n            ) => {\r\n              setTimeout(() => {\r\n                const formValues = {\r\n                  password: values.password,\r\n                  email: values.email,\r\n                  rememberMe: values.rememberMe,\r\n                  captcha: values.captcha\r\n                }\r\n                dispatch(logIn(values))\r\n                setSubmitting(false);\r\n              }, 500);\r\n            }}\r\n          >\r\n            {({ errors, touched }) => ( \r\n            <Form>\r\n            <div className={s.formRow}>\r\n              <label htmlFor=\"email\">Email</label>\r\n              <FormControl name=\"email\"\r\n                id=\"email\"\r\n                placeholder=\"john@acme.com\"\r\n                type=\"email\"\r\n                validationCallback={validateEmail}\r\n                componentType={'input'}\r\n                className={errors.email && touched.email ? s.errorInput : s.input}/>\r\n              {errors.email && touched.email && <div className={s.errorBlock}>{errors.email}</div>}\r\n              </div>\r\n              \r\n            <div className={s.formRow}>\r\n              <label htmlFor=\"password\">Password</label>\r\n              <FormControl name=\"password\"\r\n                id=\"password\"\r\n                placeholder=\"Password\"\r\n                type=\"Password\"\r\n                validationCallback={validatePassword}\r\n                componentType={'input'}\r\n                className={errors.password && touched.password ? s.errorPasswordInput : s.input}/>\r\n              {errors.password && touched.password && <div className={s.errorBlock}>{errors.password}</div>}\r\n\r\n            </div>\r\n                <label htmlFor=\"rememberMe\">Remember me</label>\r\n              <Field id=\"rememberMe\" name=\"rememberMe\"  type=\"checkbox\"/>\r\n              <button type=\"submit\" className={s.btn}>Submit</button>\r\n              {loginError ? <div className={s.errorBlock}>'Incorrect Email or Password'</div>: null}\r\n\r\n\r\n              {captchaImg && <div> \r\n              <img src={captchaImg} alt='captcha'/>\r\n              {/* <input type='text'/> */}\r\n              <Field id=\"captcha\" name=\"captcha\"  type=\"input\"/>\r\n\r\n            </div>}\r\n            </Form>)}\r\n          </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login"],"names":["id","validationCallback","componentType","placeholder","name","className","type","labelName","htmlFor","component","validate","isAuth","useSelector","state","auth","loginError","captchaImg","captcha","dispatch","useDispatch","navigate","useNavigate","validateEmail","value","error","test","validatePassword","useEffect","initialValues","password","email","rememberMe","onSubmit","values","setSubmitting","setTimeout","logIn","errors","touched","s","FormControl","src","alt"],"sourceRoot":""}